import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { getPrompt } from '../../../lib/prompts';

// Inicializar cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface PerspectiveResult {
  dimension: string;
  label: string;
  rewritten_prompt: string;
  insight: string;
}

export async function POST(request: NextRequest) {
  console.log('üåà [PERSPECTIVES API] Iniciando generaci√≥n de otras perspectivas...');
  
  try {
    // Verificar API key
    if (!process.env.OPENAI_API_KEY) {
      console.error('üö® [PERSPECTIVES API] API key de OpenAI no configurada');
      return NextResponse.json(
        { error: 'API key de OpenAI no configurada' },
        { status: 500 }
      );
    }

    // Parsear request body
    const { originalPrompt, dominantDimension } = await request.json();
    
    console.log('üìù [PERSPECTIVES API] Original prompt length:', originalPrompt?.length || 0);
    console.log('üéØ [PERSPECTIVES API] Dominant dimension:', dominantDimension?.name || 'No especificada');

    // Validar inputs
    if (!originalPrompt || typeof originalPrompt !== 'string') {
      return NextResponse.json(
        { error: 'Prompt original requerido' },
        { status: 400 }
      );
    }

    if (!dominantDimension || !dominantDimension.name) {
      return NextResponse.json(
        { error: 'Dimensi√≥n dominante requerida' },
        { status: 400 }
      );
    }

    // Seleccionar perspectivas complementarias
    const complementaryPerspectives = selectComplementaryPerspectives(dominantDimension.name);
    console.log('üîÑ [PERSPECTIVES API] Perspectivas seleccionadas:', complementaryPerspectives.map(p => p.label));

    // Cargar prompt del sistema desde JSON
    const baseSystemPrompt = await getPrompt('teambuilding', 'otras_perspectivas');
    
    // Crear prompt del sistema para generar perspectivas
    const systemPrompt = `${baseSystemPrompt}

Tu tarea es reescribir el prompt del usuario desde ${complementaryPerspectives.length} perspectivas espec√≠ficas, manteniendo la esencia original pero a√±adiendo el enfoque √∫nico de cada perfil.

PERSPECTIVAS A GENERAR:
${complementaryPerspectives.map((p, i) => `${i + 1}. ${p.label}: ${p.characteristics}`).join('\n')}

INSTRUCCIONES:
1. Para cada perspectiva, reescribe el prompt manteniendo la intenci√≥n original
2. A√±ade el vocabulario, estilo y enfoque caracter√≠stico de cada perfil
3. Haz que cada versi√≥n sea √∫nica y aut√©ntica a esa perspectiva
4. Incluye un insight valioso sobre por qu√© esta perspectiva es importante
5. Mant√©n un tono profesional pero inspirador

FORMATO DE RESPUESTA (JSON):
Responde con un array de objetos con esta estructura exacta:
[
  {
    "dimension": "nombre_dimension",
    "label": "Etiqueta Humana",
    "rewritten_prompt": "El prompt reescrito desde esta perspectiva",
    "insight": "Una explicaci√≥n de por qu√© esta perspectiva aporta valor √∫nico al proyecto"
  }
]

IMPORTANTE: Responde √öNICAMENTE con el JSON v√°lido, sin texto adicional ni formato markdown.`;

    console.log('ü§ñ [PERSPECTIVES API] Enviando prompt a OpenAI...');
    
    // Llamar a OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: originalPrompt
        }
      ],
      temperature: 0.8, // M√°s creatividad para perspectivas diversas
      max_tokens: 1200,
    });

    console.log('‚úÖ [PERSPECTIVES API] Respuesta recibida de OpenAI');
    console.log('üìä [PERSPECTIVES API] Usage:', completion.usage);

    const rawResponse = completion.choices[0]?.message?.content?.trim();

    if (!rawResponse) {
      throw new Error('No se pudieron generar las perspectivas');
    }

    console.log('üìù [PERSPECTIVES API] Respuesta completa:');
    console.log('---START RESPONSE---');
    console.log(rawResponse);
    console.log('---END RESPONSE---');

    // Limpiar y parsear respuesta
    const cleanedResponse = cleanResponse(rawResponse);
    console.log('üßπ [PERSPECTIVES API] Respuesta limpiada:', cleanedResponse);

    let perspectives: PerspectiveResult[];
    try {
      perspectives = JSON.parse(cleanedResponse);
    } catch (parseError) {
      console.error('üí• [PERSPECTIVES API] Error parseando JSON:', parseError);
      throw new Error('Error procesando la respuesta de OpenAI');
    }

    // Validar estructura de respuesta
    if (!Array.isArray(perspectives) || perspectives.length === 0) {
      throw new Error('Formato de respuesta inv√°lido');
    }

    // Validar cada perspectiva
    for (const perspective of perspectives) {
      if (!perspective.dimension || !perspective.label || !perspective.rewritten_prompt || !perspective.insight) {
        throw new Error('Perspectiva incompleta recibida');
      }
    }

    console.log('üìä [PERSPECTIVES API] Perspectivas generadas:', perspectives.length);
    console.log('‚úÖ [PERSPECTIVES API] Generaci√≥n completada exitosamente');

    return NextResponse.json({
      success: true,
      perspectives,
      originalPrompt,
      dominantDimension: dominantDimension.label,
      usage: completion.usage
    });

  } catch (error: any) {
    console.error('üí• [PERSPECTIVES API] Error:', error);
    
    // Manejo espec√≠fico de errores de OpenAI
    if (error.code === 'insufficient_quota') {
      return NextResponse.json(
        { error: 'Cuota de OpenAI agotada. Intenta m√°s tarde.' },
        { status: 429 }
      );
    }
    
    if (error.code === 'invalid_api_key') {
      return NextResponse.json(
        { error: 'API key de OpenAI inv√°lida' },
        { status: 401 }
      );
    }

    return NextResponse.json(
      { error: error.message || 'Error interno del servidor' },
      { status: 500 }
    );
  }
}

// Funci√≥n para limpiar la respuesta de OpenAI
function cleanResponse(response: string): string {
  // Remover markdown si existe
  let cleaned = response.replace(/```json\s*|\s*```/g, '');
  
  // Remover texto adicional antes y despu√©s del JSON
  const jsonStart = cleaned.indexOf('[');
  const jsonEnd = cleaned.lastIndexOf(']') + 1;
  
  if (jsonStart !== -1 && jsonEnd !== -1) {
    cleaned = cleaned.substring(jsonStart, jsonEnd);
  }
  
  return cleaned.trim();
}

// Funci√≥n para seleccionar perspectivas complementarias basadas en la dimensi√≥n dominante
function selectComplementaryPerspectives(dominantDimension: string): Array<{
  name: string;
  label: string;
  characteristics: string;
}> {
  const allPerspectives = {
    'arquitecto_sistemas': {
      name: 'arquitecto_sistemas',
      label: 'Arquitecto/a de Sistemas',
      characteristics: 'Piensa en estructuras, escalabilidad, integraci√≥n de componentes, arquitectura t√©cnica, sistemas robustos, APIs, infraestructura y soluciones t√©cnicas elegantes.'
    },
    'obsesion_ux': {
      name: 'obsesion_ux',
      label: 'Obsesi√≥n UX',
      characteristics: 'Se enfoca en la experiencia del usuario, usabilidad, interfaces intuitivas, journey del usuario, accesibilidad, dise√±o centrado en el usuario y simplicidad.'
    },
    'hacker_procesos': {
      name: 'hacker_procesos',
      label: 'Hacker de Procesos',
      characteristics: 'Optimiza workflows, automatiza tareas, encuentra formas disruptivas de hacer las cosas, hackea procesos existentes, busca eficiencia y transformaci√≥n.'
    },
    'vision_panoramica': {
      name: 'vision_panoramica',
      label: 'Visi√≥n Panor√°mica',
      characteristics: 'Ve el big picture, conecta puntos distantes, piensa estrat√©gicamente, considera ecosistemas completos, busca sinergias e interdependencias.'
    },
    'data_lover': {
      name: 'data_lover',
      label: 'Data Lover',
      characteristics: 'Se basa en m√©tricas, analytics, KPIs, datos cuantitativos, insights basados en n√∫meros, tracking, medici√≥n y an√°lisis estad√≠stico.'
    },
    'detector_futuros': {
      name: 'detector_futuros',
      label: 'Detector de Futuros',
      characteristics: 'Identifica tendencias emergentes, anticipa cambios, busca oportunidades futuras, innova, detecta se√±ales d√©biles y piensa en evoluci√≥n.'
    },
    'dise√±ador_experiencias': {
      name: 'dise√±ador_experiencias',
      label: 'Dise√±ador/a de Experiencias',
      characteristics: 'Crea experiencias memorables, se enfoca en emociones, momentos m√°gicos, journey completo, sensaciones y conexiones humanas.'
    },
    'constructor_comunidades': {
      name: 'constructor_comunidades',
      label: 'Constructor/a de Comunidades',
      characteristics: 'Construye redes, facilita colaboraci√≥n, conecta personas, crea engagement, fomenta participaci√≥n y desarrolla comunidades.'
    },
    'transformador_cultural': {
      name: 'transformador_cultural',
      label: 'Transformador/a Cultural',
      characteristics: 'Impulsa cambios culturales, desaf√≠a status quo, evoluciona mentalidades, transforma h√°bitos, crea nuevas narrativas y din√°micas.'
    },
    'storyteller_natural': {
      name: 'storyteller_natural',
      label: 'Storyteller Natural',
      characteristics: 'Comunica a trav√©s de historias, crea narrativas poderosas, conecta emocionalmente, genera engagement y usa el poder del storytelling.'
    },
    'experimentador_serial': {
      name: 'experimentador_serial',
      label: 'Experimentador/a Serial',
      characteristics: 'Prueba constantemente, itera r√°pido, valida hip√≥tesis, aprende haciendo, falla r√°pido, prototipa y experimenta sistem√°ticamente.'
    },
    'conectador_mundos': {
      name: 'conectador_mundos',
      label: 'Conectador/a de Mundos',
      characteristics: 'Une disciplinas diferentes, encuentra intersecciones inesperadas, combina perspectivas diversas, crea fusiones innovadoras y conexiones √∫nicas.'
    }
  };

  // L√≥gica para seleccionar perspectivas complementarias
  const complementaryMap: Record<string, string[]> = {
    // T√©cnicas -> Humanas/Creativas
    'arquitecto_sistemas': ['dise√±ador_experiencias', 'storyteller_natural', 'constructor_comunidades'],
    'data_lover': ['dise√±ador_experiencias', 'transformador_cultural', 'storyteller_natural'],
    'hacker_procesos': ['constructor_comunidades', 'transformador_cultural', 'dise√±ador_experiencias'],

    // Estrat√©gicas -> Creativas/Experimentales
    'vision_panoramica': ['storyteller_natural', 'experimentador_serial', 'conectador_mundos'],
    'detector_futuros': ['dise√±ador_experiencias', 'experimentador_serial', 'storyteller_natural'],

    // Experiencia -> T√©cnicas/Anal√≠ticas
    'obsesion_ux': ['arquitecto_sistemas', 'data_lover', 'hacker_procesos'],
    'dise√±ador_experiencias': ['data_lover', 'arquitecto_sistemas', 'vision_panoramica'],

    // Sociales -> T√©cnicas/Anal√≠ticas
    'constructor_comunidades': ['arquitecto_sistemas', 'data_lover', 'hacker_procesos'],
    'transformador_cultural': ['data_lover', 'arquitecto_sistemas', 'experimentador_serial'],

    // Creativas -> T√©cnicas/Estrat√©gicas
    'storyteller_natural': ['arquitecto_sistemas', 'data_lover', 'vision_panoramica'],
    'conectador_mundos': ['arquitecto_sistemas', 'data_lover', 'hacker_procesos'],

    // Experimentales -> Estrat√©gicas/Anal√≠ticas
    'experimentador_serial': ['vision_panoramica', 'data_lover', 'arquitecto_sistemas']
  };

  const selectedDimensions = complementaryMap[dominantDimension] || ['dise√±ador_experiencias', 'data_lover', 'storyteller_natural'];
  
  // Tomar las primeras 2-3 perspectivas (m√°ximo 3)
  const finalSelection = selectedDimensions.slice(0, 3);
  
  return finalSelection.map(dim => allPerspectives[dim as keyof typeof allPerspectives]);
} 